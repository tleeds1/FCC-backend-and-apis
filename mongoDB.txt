						***	MongoDB and Mongoose	***
Connect to MongoDB

Noted MongoDB contain cluster, in cluster there are databases and in each databases there are collections

const dotenv = require("dotenv");
dotenv.config({ path: "sample.env" });
const mongoose = require("mongoose");

const mongoUri =
  "mongodb+srv://<author_name>:<password>@cluster0.58zay.mongodb.net/<db-name>?retryWrites=true&w=majority&appName=Cluster0";

mongoose.connect(mongoUri, { useNewUrlParser: true, useUnifiedTopology: true });


Create a Model in MongoDB

First of all, we need a Schema. Each schema maps to a MongoDB collection. It defines the shape of the documents within that collection. Schemas are building blocks for Models. They can be nested to create complex models, but in this case, we'll keep things simple. A model allows you to create instances of your objects, called documents.

In real servers, the interactions with the database happen in handler functions. These functions are executed when some event happens (e.g. someone hits an endpoint on your API). We’ll follow the same approach in these exercises. The done() function is a callback that tells us that we can proceed after completing an asynchronous operation such as inserting, searching, updating, or deleting. It's following the Node convention, and should be called as done(null, data) on success, or done(err) on error.

const someFunc = function(done) {
  //... do something (risky) ...
  if (error) return done(error);
  done(null, result);
};

Example:

const Schema = mongoose.Schema;

const personSchema = new Schema({
  name: { type: String, required: true },
  age: Number,
  favoriteFoods: [String],
});

let Person = mongoose.model("Person", personSchema);

on this we use Shema to create a collection named Person in database that contains Node objects that each object has the struct of name type String and always be required, age is Number and favoriteFoods is an array of string

Create and Save a Record of a Model

Within the createAndSavePerson function, create a document instance using the Person model constructor you built before. Pass to the constructor an object having the fields name, age, and favoriteFoods. Their types must conform to the ones in the personSchema. Then, call the method document.save() on the returned document instance. Pass to it a callback using the Node convention. This is a common pattern; all the following CRUD methods take a callback function like this as the last argument.

Ex:
const createAndSavePerson = (done) => {
  let dave = new Person({
    name: "Dave",
    age: 27,
    favoriteFoods: ["pizza", "burgers"],
  });

  dave.save((err, data) => {
    if (err) {
      console.log(err);
    } else {
      done(null, data);
    }
  });
};

Create Many Records with model.create()
Sometimes you need to create many instances of your models, e.g. when seeding a database with initial data. Model.create() takes an array of objects like [{name: 'John', ...}, {...}, ...] as the first argument, and saves them all in the db.

const createManyPeople = (arrayOfPeople, done) => {
  Person.create(arrayOfPeople, (err, data) => {
    if (err) {
      console.log(err);
    } else {
      done(null, data);
    }
  })
};

Use model.find() to Search Your Database
In its simplest usage, Model.find() accepts a query document (a JSON object) as the first argument, then a callback. It returns an array of matches. It supports an extremely wide range of search options. Read more in the docs.

const findPeopleByName = (personName, done) => {
  Person.find({ name: personName }, (err, data) => {
    if (err) {
      console.log(err);
    } else {
      done(null, data);
    }
  })
};

Model.findOne() behaves like Model.find(), but it returns only one document (not an array), even if there are multiple items. It is especially useful when searching by properties that you have declared as unique.

const findOneByFood = (food, done) => {
  Person.findOne({ favoriteFoods: {$all: [food]}}, (err, data) => {
    if (err) {
      console.log(err);
    } else {
      done(null, data);
    }
  })
};


When saving a document, MongoDB automatically adds the field _id, and set it to a unique alphanumeric key. Searching by _id is an extremely frequent operation, so Mongoose provides a dedicated method for it.

const findPersonById = (personId, done) => {
  Person.findById(personId, (err, data) => {
    if (err) {
      console.log(err);
    } else {
      done(null, data);
    }
  })
};

Perform Classic Updates by Running Find, Edit, then Save
In the good old days, this was what you needed to do if you wanted to edit a document, and be able to use it somehow (e.g. sending it back in a server response). Mongoose has a dedicated updating method: Model.update(). It is bound to the low-level mongo driver. It can bulk-edit many documents matching certain criteria, but it doesn’t send back the updated document, only a 'status' message. Furthermore, it makes model validations difficult, because it just directly calls the mongo driver.

const findEditThenSave = (personId, done) => {
  const foodToAdd = "hamburger";
  Person.findById(personId, (err, person) => {
    if (err) {
      console.log(err);
    } else {
      person.favoriteFoods.push(foodToAdd);
      person.save((err, data) => {
        if (err) {
          console.log(err);
        } else {
          done(null, data);
        }
      })
    }
  })
};


Use findById to find target object, then if find, add item to favoriteFoods by push method, then use save to save data

Perform New Updates on a Document Using model.findOneAndUpdate()
Recent versions of Mongoose have methods to simplify documents updating. Some more advanced features (i.e. pre/post hooks, validation) behave differently with this approach, so the classic method is still useful in many situations. findByIdAndUpdate() can be used when searching by id.

Note: You should return the updated document. To do that, you need to pass the options document { new: true } as the 3rd argument to findOneAndUpdate(). By default, these methods return the unmodified object.

const findAndUpdate = (personName, done) => {
  const ageToSet = 20;
  Person.findOne({ name: personName }, (err, person) => {
    if (err) {
      console.log(err);
    } else {
      person.age = ageToSet;
      person.save((err, data) => {
        if (err) {
          console.log(err);
        } else {
          done(null, data, {new: true});
        }
      })
    }
  })
};

because the target of this function is to return the updated of document so we need to add parameter {new: true} as the third parameter of the result

Delete One Document Using model.findByIdAndRemove
findByIdAndRemove and findOneAndRemove are like the previous update methods. They pass the removed document to the db. As usual, use the function argument personId as the search key.

const removeById = (personId, done) => {
  Person.findByIdAndRemove(personId, (err, person) => {
    if (err) {
      console.log(err);
    } else {
      person.remove((err, data) => {
        if (err) {
          console.log(err);
        } else {
          done(null, data);
        }
      })
    }
  })
};



